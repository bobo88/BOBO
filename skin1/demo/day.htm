<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Day</title>
</head>
<body>
	
navigator.userAgent
XMLHttpRequest
ActiveXObject('Microsoft.XMLHTTP');
同源策略
JSONP只能用GET请求，并且要求返回Javascript
Access-Control-Allow-Origin
CORS的原理
OPTIONS请求
Promise对象 -> "承诺将来会执行"
job1.then(job2).then.(job3).catch(handleError)
new Promise(function(resolve, reject){
	
})

Promise.all();
Promise.race();

isFinite();
isNaN();
Number();  +
parseInt();
parseFloat();
undefined
null
object
valueOf() OR toString();
不指定基数意味着让parseInt()决定如何解析输入的字符串，因此为了避免错误的解析，我们建议无论在什么情况下都明确指定基数。


constructor 保存着用于创建当前对象的函数
hasOwnProperty 用于检查给定的属性在当前对象实例中是否存在
isPrototypeOf 用于检查传入的对象是否是传入对象的原型
propertyIsEnumerable 用于检查给定的属性是否能够使用for-in语句来枚举。
toLocaleString() 返回对象的字符串表示
toString() 返回对象的字符串表示
valueOf 返回对象的字符串、数值或布尔值表示。

ECMAScript中的所有参数传递的都是值，不可能通过引用传递参数。

variable instanceof constructor 


Date.now();
new Date();
new Date().getTime();



ES5与ES6的最主要区别是什么？
如何将js代码执行环境切换成ES6？ "use strict"
移动端用到什么框架？
PC端用到什么框架？
angularJS、reactJS、Vue.js？
移动端优化：1、代码结构优化；2、用户体验优化
less和sass的区别？
requirejs和seajs的区别？什么是CMD？什么是AMD？
bootstrap？
gulp配置？怎样配置项目（不用后台支持的情况下）？
zepto与平时用jQuery有什么不同的地方？
jQuery中如何判断一个元素是function？ isFunction();
HTML5和HTML4有什么区别？


研究过jQuery源码吗？

document.querySelector();获取的是第一个类名元素
document.querySelectorAll();获取的是多个元素，是一个类数组集合
此方法不兼容IE6/7/8


给DOM增加自定义属性的方式
obj["key"]=value;
obj.key=value;
获取形式只能是obj.key，另一种方式是
obj.setAttribute(key,value);
获取形式只能是obj.getAttribute(key)
删除形式只能是obj.removeAttribute(key)
二者区别在于前者的添加属性不会显示在结构上；后者添加的属性会改变html结构，显示在结构上
而后者的缺陷在于IE6/7/8下不能修改class属性


变量和函数进行预解析时是不一样的，变量只是提前声明了，而函数是提前声明和定义都完成了

刚开始加载页面时浏览器会自带一个js的执行环境，这个环境也叫做“栈内存”，也叫作用域
栈内存(作用域)存储的是基本数据类型，代码从上至下执行

引用数据类型会先开辟一段内存空间，把属性名和属性值都存起来，叫做“堆内存”


var fn = 12;
function fn(){...}
//这两个fn是一个名字，最终只能保留一个值，最终fn为变量


 查找上级作用域
如何查找当前作用域的上级作用域：看当前函数是在哪个作用域下定义的，那么它的上级作用域就是谁
和函数在哪里执行没关系，和函数在哪里定义有关系


 堆内存
存放引用数据类型值，比如对象的属性名和属性值，函数的字符串
对象数据类型或函数数据类型在定义时都会开辟一个堆内存，并且有一个引用地址；如果有变量引用这个地址，那就认为这段内存被占用，就不能被销毁了
null即为空对象指针
将变量值赋为null即可释放堆内存，浏览器在空闲的时候会把它销毁


栈内存(作用域)
私有作用域：只有函数执行才会产生私有作用域(for,if,switch的大括号不是私有作用域，而是代码块)
全局作用域属于不销毁作用域，只有当页面关闭的时候才会销毁
一般情况下，函数执行完成后，私有作用域会主动进行释放和销毁
特殊情况下，当前私有作用域的部分内存被作用域以外的东西占用了，那么当前作用域就不能被销毁了
:::::::
栈内存不销毁情况一
函数执行返回了一个引用数据类型的值，并且在函数的外面被一个其他东西接收了则不销毁

function fn(){
    var num = 100;
    return function(){
      console.log(num);
    }
}
var f = fn();  //返回值被f接收,fn不能被销毁
:::::
栈内存不销毁情况二
自执行函数形成的私有作用域在这种情况下也不销毁

var oDiv = document.getElementById('div1');
~(function(){
	oDiv.onclick = function(){
	
	}
})();
:::::
栈内存不销毁情况三
不立即销毁：fn返回的函数没有被其他东西占用，但还需要执行一次，所以暂时不能销毁，当返回的值执行完后浏览器在空闲时间把它销毁
function fn(){
    var num = 12;
    return function(){

    }
}
fn()(); //表示执行函数fn，再执行返回值的函数



分组引用

var reg = /^(\w)\1(\w)\2$/;
console.log(reg.test("zzff"));
console.log(reg.test("z0fa"));
\2代表和第二个分组出现一模一样的内容(值一样)
\1代表和第一个分组出现一模一样的内容







</body>
</html>